#+title: COMEEGA
#+OPTIONS: toc:4

/Collaborative Org-Mode Enhanced Emacs Generalized Authorship/

*COMEEGA* is an Emacs package for enhancing readability and usability of various
authorship-major-modes with augmentation by org-mode content. When applicable,
doc-strings can be writen in org-mode. File related TODOs and scheduling can be
specified in org-mode and execution of functions can be facilitated from within
the file. In effect all org-mode capabilities are combined with the native
authorship-major-mode capabilities.


* Table Of Contents     :TOC:
- [[#about-comeega][About COMEEGA]]
- [[#currently-supported-comeega-major-modes][Currently Supported COMEEGA Major-Modes]]
  -  [[#generalized-authorship----supported-activitieslanguages][Generalized Authorship -- Supported Activities/Languages:]]
  - [[#elisp-emacs-lisp-mode][Elisp (emacs-lisp-mode)]]
  - [[#python-python-mode][Python (python-mode)]]
  - [[#bash-sh-mode][Bash (sh-mode)]]
  - [[#latex-latex-mode][LaTeX (latex-mode)]]
  - [[#html-html-mode][HTML (html-mode)]]
- [[#addition-of-new-comeega-authorship-major-modes][Addition Of New COMEEGA Authorship-Major-Modes]]
- [[#switching-between-poly-major-mode-major-mode-and-org-mode][Switching Between poly-major-mode, major-mode and org-mode]]
- [[#status-usage-and-known-problems][Status, Usage And Known problems]]
- [[#potentials-of-polymode-and-comeega][Potentials Of Polymode and COMEEGA]]
- [[#uses-of-comeega-in-blee-bisos-and-bystar][Uses Of COMEEGA In Blee, BISOS And ByStar]]
- [[#concepts-of-literate-programming-and-org-babel-vs-surrounded-programming-and-comeega][Concepts Of Literate Programming And org-babel Vs Surrounded Programming And COMEEGA]]
  - [[#literate-programming-vs-surrounded-programming][Literate Programming Vs Surrounded Programming:]]
  - [[#org-babel-vs-comeega][Org-Babel Vs COMEEGA:]]
  - [[#comeega-model-and-concepts][COMEEGA Model And Concepts:]]

* About COMEEGA

*Surrounded programming* can be taught of as the *inverse of* org-mode based *literate programming*.

*COMEEGA* can be taught of as the *inverse of* org-mode based *org-babel*.

In babel (org-mode based literate programming), we include various programming
fragments inside of an org-file. In bable, org recognizes authorship-major-modes
and supports them.

In COMEEGA, we include various org-mode fragments inside of a programming
language's major mode as comments or as doc-strings in org format. The
combination is then supported through polymode.

Advent of polymode, allows for this to become seemless and in due course we
expect the source format of traditional programs to transition to COMEEGA.
This, of course is primarily applicable to emacs-lisp-mode.

COMEEGA can be consistently applied to a series of authorship-major-modes. An
authorship-major-mode is a major-mode intended for authoring --- in contrast to
for example, dired-mode, which can be thought of as an application-major-mode.

The "collaborative" dimension of COMEEGA is inherited from git and org-mode.
Comeega-files are in git repos. File level collaboration maintains the natural
communication context. Org-mode TODOs and scheduling, deligation, tracking and
rich commenting allow for targeted collaboration. org-archiving combined with
git fundamentals provide convenient collaboration and responsibility oriented
audit-trails.

* Currently Supported COMEEGA Major-Modes

Org-mode is included as comments or as doc-strings in authorship major-modes.

Each authorship-major-mode specifies a number of regexp tags:

1) authorship-major-mode's org-mode comment block syntax. These are typically built
   on top of authorship-major-mode's block comment sysntax.

2) authorship-major-mode's org-mode doc-string syntax.

3) authorship-major-mode's org-dynamic-block comment prefix syntax.

COMEEGA builds on top of PolyMode. (1) and (2) above are specified as
authorship-major-mode's inner-block regexps.

(3) is specified as part of the machinary that makes org-dynamic-blocks
available to authorship-major-modes.

(3) can be considered an optional layer. Blee-COMEEGA makes heavy use of
this capability.

authorship-major-modes-org-dynamic-blocks are often used to create
org-fragments. authorship-major-modes-org-dynamic-blocks can also be used as
visible macro facilities for languages that don't have macro capabilities.

Currently supported COMEEGA major-modes are:


**  Generalized Authorship -- Supported Activities/Languages:

At this time we provide support for the following programming languages and
authorship activities.

|-----------------------+----------------------+-------------------|
| authorship-major-mode | Comment Block syntax | Doc-String Syntax |
|-----------------------+----------------------+-------------------|
|-----------------------+----------------------+-------------------|
| emacs-lisp-mode       | (orgCmntBegin        | " #+org_begin     |
| emacs-lisp-mode       | orgCmntEnd)          | #+org_end ""      |
|-----------------------+----------------------+-------------------|
| python-mode           | """#+org_begin       | """#+org_begin    |
| python-mode           | """#+org_begin       | """#+org_begin    |
|-----------------------+----------------------+-------------------|
| sh-mode               |                      |                   |
| sh-mode               |                      |                   |
|-----------------------+----------------------+-------------------|
| latex-mode            |                      |                   |
| latex-mode            |                      |                   |
|-----------------------+----------------------+-------------------|
| html-mode             |                      |                   |
| html-mode             |                      |                   |
|-----------------------+----------------------+-------------------|


** Elisp (emacs-lisp-mode)

Emacs Lisp does not have block/multiline comments.
The comment-block package is used to provide string based elisp comments.

This authorship-major-mode's org-mode comment block syntax is:
- open: (orgCmntBegin
- close: orgCmntEnd)

This authorship-major-mode's org-mode doc-string syntax is:
- open: #+org_begin
- close: #+org_end

These are specified in comeega-poly-elisp.el.

This authorship-major-mode's org-dynamic-block comment prefix syntax is:

- open: #+org_dblockNOTYET
- close: #+org_dblockNOTYET

** Python (python-mode)

Python's """ Some Comment.""" feature is used.

This authorship-major-mode's org-mode comment block syntax is:
- open: (orgCmntBegin
- close: orgCmntEnd)

This authorship-major-mode's org-mode doc-string syntax is:
- open: #+org_begin
- close: #+org_end

These are specified in comeega-poly-elisp.el.

This authorship-major-mode's org-dynamic-block comment prefix syntax is:

- open: #+org_dblockNOTYET
- close: #+org_dblockNOTYET

** Bash (sh-mode)

Bash's here-document feature is used to provide block-comments.

This authorship-major-mode's org-mode comment block syntax is:
- open: (orgCmntBegin
- close: orgCmntEnd)

This authorship-major-mode's org-mode doc-string syntax is:
- open: #+org_begin
- close: #+org_end

These are specified in comeega-poly-elisp.el.

This authorship-major-mode's org-dynamic-block comment prefix syntax is:

- open: #+org_dblockNOTYET
- close: #+org_dblockNOTYET

** LaTeX (latex-mode)

LaTeX's comment packages is used to provide block-comments.

This authorship-major-mode's org-mode comment block syntax is:
- open: (orgCmntBegin
- close: orgCmntEnd)

This authorship-major-mode's org-mode doc-string syntax is:
- open: #+org_begin
- close: #+org_end

These are specified in comeega-poly-elisp.el.

This authorship-major-mode's org-dynamic-block comment prefix syntax is:

- open: #+org_dblockNOTYET
- close: #+org_dblockNOTYET


** HTML (html-mode)

TO BE DOCUMENTED

* Addition Of New COMEEGA Authorship-Major-Modes

Addition Of new COMEEGA authorship-major-modes involves the following:

1) For the new authorship-major-mode, decide on the comment-block and docstring syntax.

2) Create a commega-poly-<mode>.elisp

* Switching Between poly-major-mode, major-mode and org-mode

For any authorship-major-mode file, you switch among the following:

1) native-mode      --- comeega:native/switch Command
2) poly-native-mode --- comeega:poly-native/switch Command
3) org-mode         --- comeega:org/switch Command

Blee keybinding for these are provided and you can customize as you wish.

* Status, Usage And Known problems

We have been using COMEEGA without poly-mode for several years.

Polymode now makes COMEEGA a gread deal more plesant.
But polymode is relatively new and as such there are glitches.

* Potentials Of Polymode and COMEEGA

As polymode matures, COMEEGA can be standardized to become the default
autorship model, obsoleting current traditional models. Why not? Right?!

* Uses Of COMEEGA In Blee, BISOS And ByStar

The concept of COMEEGA orginated in Blee (ByStar Libre-Halaal Emacs Environment).

COMEEGA is the standard authorship model of ByStar ---  [[http://www.by-star.net]]

All of BISOS (ByStar Internet Services OS) is consistently developed with COMEEGA.

* Concepts Of Literate Programming And org-babel Vs Surrounded Programming And COMEEGA

The same way that org-babel can be considered an environment for Literate Programming,
COMEEGA can be considered an environment for Surrounded Programming.

We expand on the concept of Surrounded Programming in contrast to Literate Programming.

** Literate Programming Vs Surrounded Programming:

Literate programming is a programming paradigm introduced by Donald
Knuth in which a computer program is given an explanation of its logic
in a natural language, such as English, interspersed with snippets of
macros and traditional source code, from which compilable source code
can be generated.

Sourrounded Programming is a programming paradigm in which a traditional
computer program is surrounded by human-oriented text and tools.
A Sourrounded Program has two parallel models and views:
1) the traditional source code model and view
2) an human languge oriented  model and view

The Sourrounded Programming model is not specific to any particular
programming language. The model provides for creation of a
generalized authorship paradigm.

Sourrounded Programming can be thought of as the inverse of Literate Programming

** Org-Babel Vs COMEEGA:

Org-Babel is an environment for Literate Programming.

Babel is Org's ability to execute source code within Org documents.

COMEEGA is an environment for Surrounded Programming.

COMEEGA is Org's ability to augment and execute within source-code documents.

** COMEEGA Model And Concepts:

COMEEGA  sourrounds the traditional source code and augments it by:

1) human-oriented text which further structures and describes the semantics of the program
2) Provides for rich mark ups of docstrings
3) Provides for embedding rich set of tools within the source
   code itself and augment its development, executions and testing/verification
